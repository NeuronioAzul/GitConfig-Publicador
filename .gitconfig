[user]
name = Mauro Rocha
email = maurort@apoioprodesp.sp.gov.br
[credential]
helper = manager-core
[http]
sslVerify = false
[difftool "sourcetree"]
cmd = '' \"$LOCAL\" \"$REMOTE\"
[mergetool "sourcetree"]
cmd = "'' "
trustExitCode = true
[core]
longpaths = true
[credential "https://gitlab.prodesp.sp.gov.br"]
provider = generic
[filter "lfs"]
smudge = git-lfs smudge -- %f
process = git-lfs filter-process
required = true
clean = git-lfs clean -- %f
[alias]
# Lista o status simplificado dos arquivos
s = !git status -s

# Lista o log resumido
l = !git log --pretty=format:'%C(blue)%h%C(red)%d %C(white)%s > %C(yellow)%cn, %C(green)%cr' --decorate

# faz o checkout ( git c nome-do-seu-branch )
c = !git checkout

# cria o branch e altera para o branch recem criado ( git cb nome-do-seu-branch )
cb = !git checkout -b

# Cria o branch, muda p/ o branch criado e envia o branch para o servidor do git lab ( git cp nome-do-seu-branch )
cp = !sh -c 'git branch -f $1 && git checkout $1 && git push --set-upstream origin $1' -

wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard

save = git add . && git commit -m "Save Point" && git branch save-point && git reset --soft HEAD~1

# Push all - pall
# faz checkout e pull nos 4 branchs de uma vez, ( git pall )
puxa = !git c master -q && git reset --hard origin/master -q && git pull -q && git c pronto_producao && git reset --hard origin/pronto_producao && git pull && git c release && git reset --hard origin/release && git pull && git c test && git reset --hard origin/test && git pull && git c develop && git reset --hard origin/develop && git pull && git c trainning && git reset --hard origin/trainning && git pull

# Clear all - call
# limpa o branch atual e excluir tudo que não foi feito 'commit' ( git call )
call = !git add . && git restore --staged . && git checkout -- . && git clean -fd # && git reset --hard origin/release

del = !sh -c 'git branch -D '$1

pp = !git checkout pronto_producao && git pull

tp = !git checkout test && git pull

rp = !git checkout release && git pull

dp = !git checkout develop && git pull

cpnc = !sh -c 'git cherry-pick --no-commit $1 && git restore --staged . && git status' -

# cereja = !git c release && git checkout -b release-$(git name-rev --name-only --exclude=tags/* $1) && git cpnc $1 && git status && echo -en 'Continuar e enviar para ( release ) => (s) sim (n) não o padrão é (n): ' && read 'x' && [ $x = 's' ] && git commit --reuse-message=$1 && git status && git l

amendoa = !git status && echo -e 'Continuar e enviar para \\033[93m( release )\\033[0m => (s) sim (n) não o padrão é (n): ' && read 'x' && [ $x = 's' ] && git branch

# git reset --soft HEAD~$1
abobora = "!f() { IFS='\n'; \
				echo -e '\\033[41m\\033[37m  Resetando  \\033[0m ('"$1"') commit(s) os arquivos ficaram em \\033[96m Staged \\033[0m'; \
				git reset --soft HEAD~"$1" ; \
				git status ; \
        	}; f"

# comando para combinar os ultimos commits do branch atual com uma nova mensagem
# git combinar <quantidade-de-commits> <mensagem>
combinar = !git reset --soft HEAD~$1 && git commit -m "$2"

# gitlab personal access token: LDF9LfmUxFmDvBsqso7h
# GITLAB_PRIVATE_TOKEN=LDF9LfmUxFmDvBsqso7h
# GITLAB_URL_PREFIX=https://gitlab.prodesp.sp.gov.br

limpatempbranch = !git branch --list 'pronto_producao_*' | sed 's/^* //' | xargs -r git branch -d && git branch --list 'trainning_*' | sed 's/^* //' | xargs -r git branch -d && git branch --list 'develop_*' | sed 's/^* //' | xargs -r git branch -d && git branch --list 'release_*' | sed 's/^* //' | xargs -r git branch -d && git branch --list 'hotfix_*' | sed 's/^* //' | xargs -r git branch -d && git branch --list 'test_*' | sed 's/^* //' | xargs -r git branch -d

varrelease = "!f() { IFS='\n'; \
		echo -e '\\033[96m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓'; \
		echo -e '\\033[96m┃  ＲＥＬＥＡＳＥ                 ┃'; \
		echo -e '\\033[96m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\\033[0m'; \
	}; f"
vartest = "!f() { IFS='\n'; \
		echo -e '\\033[96m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓'; \
		echo -e '\\033[96m┃  ＴＥＳＴ                       ┃'; \
		echo -e '\\033[96m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\\033[0m'; \
	}; f"
vardevelop = "!f() { IFS='\n'; \
		echo -e '\\033[96m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓'; \
		echo -e '\\033[96m┃  ＤＥＶＥＬＯＰ                 ┃'; \
		echo -e '\\033[96m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\\033[0m'; \
	}; f"
varprontop = "!f() { IFS='\n'; \
		echo -e '\\033[96m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓'; \
		echo -e '\\033[96m┃  ＰＲＯＮＴＯ＿ＰＲＯＤＵＣＡＯ ┃'; \
		echo -e '\\033[96m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\\033[0m'; \
	}; f"
vartrain = "!f() { IFS='\n'; \
		echo -e '\\033[96m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓'; \
		echo -e '\\033[96m┃  ＴＲＡＩＮＮＩＮＧ             ┃'; \
		echo -e '\\033[96m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\\033[0m'; \
	}; f"

# git cafe [hash] [s/n] [excluir/-] [release develop test] - Opcional
cafe = "!f() { IFS='\n'; \
		if [[ $4 = \"\" ]]; then \
			declare -a arr=( 'release' 'develop' 'test' 'pronto_producao' 'trainning'); \
		else \
			declare -a arr=( $4 $5 $6 ); \
		fi; \
		declare -a PISCA='\\033[5;1m' ; \
		declare -a F_VERD='\\033[42m' ; \
		declare -a F_VERM='\\033[41m' ; \
		declare -a F_AMAR='\\033[43m' ; \
		declare -a F_AZUL='\\033[46m' ; \
		declare -a TXT_VERD='\\033[92m' ; \
		declare -a TXT_VERM='\\033[91m' ; \
		declare -a TXT_AMAR='\\033[33m' ; \
		declare -a TXT_AMARCLA='\\033[93m' ; \
		declare -a TXT_AZUL='\\033[96m' ; \
		declare -a TXT_AZULESC='\\033[36m' ; \
		declare -a TXT_ROSA='\\033[95m' ; \
		declare -a ZERA='\\033[0m' ; \
        for l in "${arr[@]}"; do \
			echo -e '' ; \
			if [ "$l" == 'release' ] ; then \
				git varrelease; \
			fi;\
			if [ "$l" == 'test' ] ; then \
				git vartest; \
			fi;\
			if [ "$l" == 'develop' ] ; then \
				git vardevelop; \
			fi;\
			if [ "$l" == 'pronto_producao' ] ; then \
				git varprontop; \
			fi;\
			if [ "$l" == 'trainning' ] ; then \
				git vartrain; \
			fi;\
			echo -e $TXT_VERD'┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ '; \
			echo -e $TXT_VERD'┃  ＩＮＩＣＩＡＮＤＯ             ┃'; \
			echo -e $TXT_VERD'┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛'$ZERA; \
			PEGADA=14;\
			x="$PEGADA" ; \
			y=0; \
			GALHO="$l" ; \
			echo -e 'Processo de preparação do branch para o Merge Request' ; \
			if [[ "$2" != 's' ]]; then \
				((y+=1)) ; \
				echo -e -n $TXT_AMAR'[ '$y' de '$x' ]'$ZERA $TXT_AZUL'▶️'$ZERA' Posso limpar tudo (Staged, Novos, e Modificados) e iniciar a operação? => [s,n] (n): '; \
				read 'z' ; \
				if [[ "$z" != 's' ]]; then \
					echo -e $TXT_ROSA'┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ '; \
					echo -e $TXT_ROSA'┃  ＰＡＲＡＮＤＯ                 ┃'; \
					echo -e $TXT_ROSA'┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛'$ZERA; \
					break; \
				fi; \
			fi; \
			((y+=1)) ; \
			echo -e $TXT_AMAR'[ '$y' de '$x' ]'$ZERA $TXT_AZUL'▶️'$ZERA' Limpando Staged, Novos, e Modificados' ; \
			git restore --staged . --quiet; \
			git checkout --quiet -- . ; \
			git clean -fd --quiet; \
			((y+=1)) ; \
			echo -e $TXT_AMAR'[ '$y' de '$x' ]'$ZERA $TXT_AZUL'▶️'$ZERA' Mudando para a branch ( '$GALHO' ) '$ZERA ; \
			git checkout $GALHO -q ; \
			((y+=1)) ; \
			echo -e $TXT_AMAR'[' $y 'de' $x ']'$ZERA $TXT_AZUL'▶️'$ZERA' Atualizando a branch ( '$GALHO' ) '$ZERA ; \
			git pull -q ; \
			((y+=1)) ; \
			BRANCH_LOCAL=$GALHO'_'$(date +'%Y%m%d')'_'$(git name-rev --name-only --exclude=tags/* $1) ; \
			echo -e $TXT_AMAR'[ '$y' de '$x' ]'$ZERA $TXT_AZUL'▶️'$ZERA' Criando a branch local ( '$BRANCH_LOCAL' ) '$ZERA ; \
			git branch -f $BRANCH_LOCAL -q ; \
			((y+=1)) ; \
			echo -e $TXT_AMAR'[ '$y' de '$x' ]'$ZERA $TXT_AZUL'▶️'$ZERA' Mudando para a branch (' $BRANCH_LOCAL ') '$ZERA ; \
			git checkout $BRANCH_LOCAL -q ; \
			((y+=1)) ; \
			echo -e $TXT_AMAR'[ '$y' de '$x' ]'$ZERA $TXT_AZUL'▶️'$ZERA' Enviando a branch (' $BRANCH_LOCAL ') '$ZERA ; \
			git push -f --quiet --set-upstream origin $BRANCH_LOCAL -q  &> /dev/null ; \
			((y+=1)) ; \
			echo -e $TXT_AMAR'[ '$y' de '$x' ]'$ZERA $TXT_AZUL'▶️'$ZERA' Fazendo o cherry-pick '$TXT_AMARCLA'( ' $1 ' )'$ZERA ; \
			git cherry-pick --no-commit $1; \
			CONFLICTS=$(git ls-files -u | wc -l) ; \
			if [ $CONFLICTS -gt 0 ] ; then \
				echo -e $TXT_AMAR'┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ '; \
				echo -e $TXT_AMAR'┃  ＡＬＥＲＴＡ !                 ┃'; \
				echo -e $TXT_AMAR'┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛'$ZERA; \
				echo -e $F_VERM $ZERA$TXT_VERM' Foram encontrados Conflitos.                          '$ZERA ; \
				echo -e -n "$F_VERM $ZERA$TXT_VERM"' Deseja resolver os conflitos e continuar o processo? => [s,n] (n): ' ; \
				read 'CONFLITOSRESOLVIDOS' ; \
				if [[ "$CONFLITOSRESOLVIDOS" = 's' ]]; then \
					echo -e -n $TXT_AMAR'[ '$y' de '$x' ]'$ZERA $TXT_AZUL'▶️'$ZERA' Resolva os conflitos agora e depois pressione enter...' ; \
					read ; \
					git add . > /dev/null ; \
					echo -e $TXT_AMAR'[ '$y' de '$x' ]'$ZERA $TXT_AZUL'▶️'$ZERA' Conflitos resolvidos '$ZERA ; \
				else \
					echo -e -n $F_VERM $ZERA$TXT_AMAR' Limpar (Conflitos, Staged, Novos, e Modificados) '$ZERA' => [s,n] (n): ' ; \
					read 'CONFIRMALIMPEZACONFLITOS' ; \
					if [[ "$CONFIRMALIMPEZACONFLITOS" != 's' ]]; then \
						echo -e $TXT_VERM'┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ '; \
						echo -e $TXT_VERM'┃  ＡＬＥＲＴＡ !                 ┃'; \
						echo -e $TXT_VERM'┃  ＰＡＲＡＮＤＯ                 ┃'; \
						echo -e $TXT_VERM'┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛'$ZERA; \
						echo -e $F_VERM $ZERA ' Finalizando o processo branch: '$TXT_AMAR$GALHO$ZERA ; \
						echo -e $F_VERM $ZERA ' Os conflitos serão mantidos para resolução '$ZERA ; \
						echo -e $F_VERM $ZERA ' Apos resolução, execute o comando: '$TXT_AMAR' git add . && git commit -m <mensagem> && git push -f '$ZERA ; \
						break ; \
					else \
						echo -e $TXT_VERM'┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ '; \
						echo -e $TXT_VERM'┃  ＡＬＥＲＴＡ !                 ┃'; \
						echo -e $TXT_VERM'┃  ＰＡＲＡＮＤＯ                 ┃'; \
						echo -e $TXT_VERM'┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛'$ZERA; \
						echo -e $F_VERM $ZERA$TXT_VERM' Finalizando o processo da branch: '$TXT_AMAR$GALHO ; \
						echo -e $F_VERM $ZERA$TXT_VERM' Vamos limpar tudo, desfazendo os conflitos            '$ZERA ; \
						echo -e $F_VERM $ZERA$TXT_VERM' Vamos tentar com o próximo branch se existir.         '$ZERA ; \
						git restore --staged . -q ; \
						git checkout -- . ; \
						git clean -fd -q ; \
						git reset --hard origin/$GALHO -q ; \
						echo -e $F_AMAR $ZERA$TXT_VERM'       Limpeza Concluida                                     '$ZERA ; \
					fi; \
					continue; \
				fi; \
			fi; \
			if [[ "$2" != 's' ]]; then \
				((y+=1)); \
				echo -e -n $TXT_AMAR'[ '$y' de '$x' ]'$ZERA $TXT_AZUL'▶️'$ZERA' Preparar a branch para o '$TXT_VERD'Merge Request'$ZERA' na '$TXT_AMAR'( '$GALHO' )'$ZERA'  => (s) sim (n) não - padrão é (n): ' ; \
				read 'a' ; \
				if [[ "$a" != 's' ]]; then \
					echo -e $TXT_ROSA'┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ '; \
					echo -e $TXT_ROSA'┃  ＰＡＲＡＮＤＯ                 ┃'; \
					echo -e $TXT_ROSA'┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛'$ZERA; \
					break; \
				fi; \
			fi; \
			((y+=1)) ; \
			echo -e $TXT_AMAR'[ '$y' de '$x' ]'$ZERA $TXT_AZUL'▶️'$ZERA' Criando o commit' ; \
			git commit -a --quiet --reuse-message=$1 ; \
			((y+=1)) ; \
			echo -e $TXT_AMAR'[ '$y' de '$x' ]'$ZERA $TXT_AZUL'▶️'$ZERA' Enviando o commit para o '$TXT_AMARCLA'GitLab'$ZERA ; \
			git push -q -f --quiet &> /dev/null ; \
			((y+=1)) ; \
			echo -e $TXT_AMAR'[ '$y' de '$x' ]'$ZERA $TXT_AZUL'▶️'$ZERA' Voltando para o branch '$TXT_AZULESC'( '$GALHO' )'$ZERA ; \
			git c $GALHO -q ; \
			if [[ "$3" = 's' ]]; then \
				((y+=1)) ; \
				echo -e $TXT_AMAR'[ '$y' de '$x' ]'$ZERA $TXT_AZUL'▶️'$ZERA' Excluindo o branch local '$ZERA $BRANCH_LOCAL $ZERA ; \
				git branch -D $BRANCH_LOCAL -q ; \
			fi; \
			echo -e $PISCA$F_VERM'\\033[1m Link para a criação da branch '$ZERA; \
			echo -e $PISCA$TXT_VERD'━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━'$ZERA; \
			echo -e $TXT_VERD' '$TXT_AZUL'https://gitlab.prodesp.sp.gov.br/prodesp/simec/simec/-/merge_requests/new?merge_request%5Bsource_project_id%5D=1636&merge_request%5Bsource_branch%5D='$BRANCH_LOCAL'&merge_request%5Btarget_project_id%5D=1636&merge_request%5Btarget_branch%5D='$GALHO ; \
			echo -e $PISCA$TXT_VERD'━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ '$ZERA; \
			echo -e $TXT_VERD'┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ '; \
			echo -e $TXT_VERD'┃  ＳＵＣＥＳＳＯ！！！           ┃'; \
			echo -e $TXT_VERD'┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛'$ZERA; \
			echo -e '\n' ; \
        done; \
        }; f"

# git push -o merge_request.create -o merge_request.merge_when_pipeline_succeeds -o merge_request.target='$GALHO' -o merge_request.title="'$MR_TITLE'" -o merge_request.description="'$MR_DESCRIPTION'" -o merge_request.assign='$MR_ASSIGNEE' -o merge_request.label="'$MR_LABEL'"
# git push -o merge_request.create -o merge_request.merge_when_pipeline_succeeds -o merge_request.target=$GALHO -o merge_request.title=\"$MR_TITLE\" -o merge_request.description=\"$MR_DESCRIPTION\" -o merge_request.assign=$MR_ASSIGNEE -o merge_request.label=\"$MR_LABEL\" ; \

# read 'CONFIRMALIMPEZACONFLITOS' ; \

teste = "!f() { IFS='\n'; \
	declare -a F_VERD='\\033[42m' ; \
	declare -a F_VERM='\\033[41m' ; \
	declare -a F_AMAR='\\033[43m' ; \
	declare -a F_AMARCLA='\\033[43m' ; \
	declare -a PISCA='\\033[5;1m' ; \
	declare -a LINHAACIMA='\\033[53m' ; \
	declare -a F_AZUL='\\033[46m' ; \
	declare -a TXT_VERD='\\033[92m' ; \
	declare -a TXT_VERM='\\033[91m' ; \
	declare -a TXT_AMAR='\\033[33m' ; \
	declare -a TXT_AMARCLA='\\033[93m' ; \
	declare -a TXT_AZUL='\\033[96m' ; \
	declare -a TXT_AZULESC='\\033[36m' ; \
	declare -a TXT_ROSA='\\033[95m' ; \
	declare -a ZERA='\\033[0m' ; \
	declare -a GALHO='teste' ;\
	declare -a BRANCH_LOCAL='evolutiva_mauro_20221130_teste_para_ver_se_funciona' ; \
	echo -e $PISCA$F_VERM'\\033[1m Link para a criação da branch '$ZERA; \
	echo -e $TXT_AMAR'┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ '; \
	echo -e $TXT_AMAR'┃ '$TXT_AZUL$LINHAACIMA'https://gitlab.prodesp.sp.gov.br/prodesp/simec/simec/-/merge_requests/new?merge_request%5Bsource_project_id%5D=1636&merge_request%5Bsource_branch%5D='$BRANCH_LOCAL'&merge_request%5Btarget_project_id%5D=1636&merge_request%5Btarget_branch%5D='$GALHO$ZERA ; \
	echo -e $TXT_AMAR'┗━━━━━━'$ZERA; \
	echo -e $TXT_VERD'┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ '; \
	echo -e $TXT_VERD'┃  ＳＵＣＥＳＳＯ！！！           ┃'; \
	echo -e $TXT_VERD'┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛'$ZERA; \
	echo -e $TXT_VERM'┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ '; \
	echo -e $TXT_VERM'┃  ＰＥＲＩＧＯ ！                ┃'; \
	echo -e $TXT_VERM'┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛'$ZERA; \
	echo -e $TXT_AMAR'┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ '; \
	echo -e $TXT_AMAR'┃  ＡＬＥＲＴＡ !                 ┃'; \
	echo -e $TXT_AMAR'┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛'$ZERA; \
	echo -e $TXT_AMARCLA'┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ '; \
	echo -e $TXT_AMARCLA'┃  ＳＵＣＥＳＳＯ！！！           ┃'; \
	echo -e $TXT_AMARCLA'┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛'$ZERA; \
	echo -e $TXT_AZUL'┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ '; \
	echo -e $TXT_AZUL'┃  ＳＵＣＥＳＳＯ！！！           ┃'; \
	echo -e $TXT_AZUL'┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛'$ZERA; \
	echo -e $TXT_AZULESC'┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ '; \
	echo -e $TXT_AZULESC'┃  ＳＵＣＥＳＳＯ！！！           ┃'; \
	echo -e $TXT_AZULESC'┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛'$ZERA; \
	echo -e $TXT_ROSA'┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ '; \
	echo -e $TXT_ROSA'┃  ＳＵＣＥＳＳＯ！！！           ┃'; \
	echo -e $TXT_ROSA'┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛'$ZERA; \
	echo -e $TXT_ROSA'┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ '; \
	echo -e $TXT_ROSA'┃  ＰＡＲＡＮＤＯ                 ┃'; \
	echo -e $TXT_ROSA'┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛'$ZERA; \
	echo -e ' \\033[4;30m Preto Sublinhado  \\033[0m             --> 4;30 '; \
	echo -e ' \\033[4;31m Vermelho Sublinhado  \\033[0m          --> 4;31 '; \
	echo -e ' \\033[4;32m Verde Sublinhado  \\033[0m             --> 4;32 '; \
	echo -e ' \\033[4;33m Marrom Sublinhado  \\033[0m            --> 4;33 '; \
	echo -e ' \\033[4;34m Azul Sublinhado  \\033[0m              --> 4;34 '; \
	echo -e ' \\033[4;35m Purple Sublinhado  \\033[0m            --> 4;35 '; \
	echo -e ' \\033[4;36m Cyan Sublinhado  \\033[0m              --> 4;36 '; \
	echo -e ' \\033[4;37m Branco Sublinhado  \\033[0m             --> 4;37 '; \
	echo -e ' \\033[0;30m Preto  \\033[0m             --> 0;30 '; \
	echo -e ' \\033[0;31m Vermelho  \\033[0m          --> 0;31 '; \
	echo -e ' \\033[0;32m Verde  \\033[0m             --> 0;32 '; \
	echo -e ' \\033[0;33m Marrom  \\033[0m            --> 0;33 '; \
	echo -e ' \\033[0;34m Azul  \\033[0m              --> 0;34 '; \
	echo -e ' \\033[0;35m Purple  \\033[0m            --> 0;35 '; \
	echo -e ' \\033[0;36m Cyan  \\033[0m              --> 0;36 '; \
	echo -e ' \\033[0;37m Cinza Claro  \\033[0m       --> 0;37 '; \
	echo -e ' \\033[1;30m Preto Acinzentado \\033[0m  --> 1;30 '; \
	echo -e ' \\033[1;31m Vermelho Claro  \\033[0m    --> 1;31 '; \
	echo -e ' \\033[1;32m Verde Claro  \\033[0m       --> 1;32 '; \
	echo -e ' \\033[1;33m Amarelo \\033[0m            --> 1;33 '; \
	echo -e ' \\033[1;34m Azul  Claro \\033[0m        --> 1;34 '; \
	echo -e ' \\033[1;35m Purple Claro  \\033[0m      --> 1;35 '; \
	echo -e ' \\033[1;36m Cyan  Claro \\033[0m        --> 1;36 '; \
	echo -e ' \\033[1;37m Branco  \\033[0m            --> 1;37 '; \
	echo -e ' \\033[40;1;37m Fundo Preto    \\033[0m     --> 40;?;? '; \
	echo -e ' \\033[41;1;37m Fundo Vermelho \\033[0m     --> 41;?;? '; \
	echo -e ' \\033[42;1;37m Fundo Verde    \\033[0m     --> 42;?;? '; \
	echo -e ' \\033[43;1;37m Fundo Marrom   \\033[0m     --> 43;?;? '; \
	echo -e ' \\033[44;1;37m Fundo Azul     \\033[0m     --> 44;?;? '; \
	echo -e ' \\033[45;1;37m Fundo Purple   \\033[0m     --> 45;?;? '; \
	echo -e ' \\033[46;1;37m Fundo Cyan     \\033[0m     --> 46;?;? '; \
	echo -e ' \\033[47;1;37m Fundo Cinza    \\033[0m     --> 47;?;? '; \
	echo -e ' \\033[4;30m Sublinhado  \\033[0m        --> 4;? '; \
	echo -e ' \\033[5;30m Piscando    \\033[0m        --> 5;? '; \
	echo -e ' \\033[7;30m Invertido   \\033[0m        --> 7;? '; \
	echo -e ' \\033[8;30m Concealed   \\033[0m        --> 8;? '; \
}; f"

teste2 = "!f() { IFS='\n'; \
		echo -e 'ＤＥＶＥＬＯＰ' ; \
		echo -e 'ＲＥＬＥＡＳＥ' ; \
		echo -e 'ＴＥＳＴ' ; \
		echo -e 'ＰＲＯＮＴＯ＿ＰＲＯＤＵＣＡＯ' ; \
	}; f"

## declare an array variable
# declare -a arr=("elemenL1" "element2" "element3")

# ## now loop through the above array
# for i in "${arr[@]}"
# do
#    echo "$i"
#    # or do whatever with individual element of the array
# done

# # You can access them using echo "${arr[0]}", "${arr[1]}" also

safereset = "!f() { \
	trap 'echo ERROR: Operation failed; return' ERR; \
	echo Making sure there are no changes...; \
	last_status=$(git status --porcelain);\
	if [[ $last_status != \"\" ]]; then\
		echo There are dirty files:;\
		echo \"$last_status\";\
		echo;\
		echo -n \"Enter Y if you would like to DISCARD these changes or W to commit them as WIP: \";\
		read dirty_operation;\
		if [ \"$dirty_operation\" == \"Y\" ]; then \
			echo Resetting...;\
			git reset --hard;\
		elif [ \"$dirty_operation\" == \"W\" ]; then\
			echo Comitting WIP...;\
			git commit -a --message='WIP' > /dev/null && echo WIP Comitted;\
		else\
			echo Operation cancelled;\
			exit 1;\
		fi;\
	fi;\
}; \
f"

# (some_branch) git commit --amend --no-edit
# git commit --amend -m "Your new commit message"

[safe]
directory = D:/_Rascunhos
